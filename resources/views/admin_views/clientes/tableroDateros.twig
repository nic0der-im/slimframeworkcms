{% extends "admin_views/base.twig" %}
{% block aditional_css %}

<style type="text/css">
</style>
{% endblock %}
{% block title %}Dateros{% endblock %}
{% block header_title %}Listado de Dateros{% endblock %}
{% block breadcrumb %}
	<li class="breadcrumb-item active">
    Dateros
  </li>
{% endblock %}
{% block content %}
<div class="row">
  {% include 'admin_views/admin_partials/flash.twig' %}
</div>
<div class="row">
	<div class="col-lg-12 col-md-12">
		<div class="card">
			<div class="card-header">
				<h3 class="card-title text-bold">Listado:</h3>
        <div class="card-tools dropdown pull-right">
          <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            <span class="caret"></span> Acciones
          </button>
          <div class="dropdown-menu">
            <a class="dropdown-item" href="{{path_for('cliente.datero.cargar')}}">Agregar Datero</a>
          </div>
        </div>
			</div>
			<div class="card-body p-0">
				<div class="table-responsive">
					<table class="table table-hover" width="100%" id="tablaDatero">
						<thead>
							<tr>
								<th>Creado</th>
                <th>Vendedor</th>
								<th>Cliente</th>
								<th>Vehiculo</th>
								<th>Precios</th>
								<th>Presupuesto</th>
                <th>Estado</th>
								<th data-orderable="false"></th>
							</tr>
						</thead>
						<tbody>
						</tbody>
					</table>
				</div>
			</div>
		</div>
	</div>
  <div class="col-lg-12">
    <div class="card card-success">
      <div class="card-header">
        <h3 class="card-title text-bold">Vehiculos NUEVOS, a partir de un datero:</h3>
      </div>
      <div class="card-body">
        <div class="table-responsive">
          <table class="table table-striped" width="100%" id="tablaVehiculos">
            <thead>
              <tr>
                <th>Creado</th>
                <th>Marca</th>
                <th>Modelo</th>
                <th>Año</th>
                <th>Entrega Minima</th>
                <th>Precio Venta</th>
                <th data-orderable="false"></th>
              </tr>
            </thead>
            <tbody>
              {% for item in vehiculos %}
              <tr>
                <td>
                  {{item.created_at|date('d/m/Y')}}
                </td>
                <td>
                  {{item.getMarca.nombre}}
                </td>
                <td>
                  {{item.modelo}}
                </td>
                <td>
                  {{item.year}}
                </td>
                <td>
                  {{item.entrega_minima}}
                </td>
                <td>
                  {{item.precio_venta}}
                </td>
                <td>
                </td>
              </tr>
              {% endfor %}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %}
{% block custom_js %}

<script type="text/javascript">
$(document).ready(function() {

  $.fn.dataTable.moment( 'DD/MM/YYYY' );
  var tablaDatero = $('#tablaDatero').DataTable( {
    order:[[0,'desc']],
    lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "TODO"]],
    processing: true,
    serverSide: true,
    ajax:{
      url:"{{path_for('cliente.datero.consultar')}}",
    },
    columns: [
      {
        name: 'created_at',
        data: function(data,type,dataToSet){
          var fecha = moment(data.created_at, 'YYYY-MM-DD').format('DD/MM/YYYY');
          var creado = respuestaDiferenciaFecha(moment(data.created_at, 'YYYY-MM-DD HH:mm:ss'));
          var autor = capitalizar(data.individuo.apellido)+' '+capitalizar(data.individuo.nombre);
          return '<label class="control-label" data-toggle="tooltip" data-container="body" data-html="true" title="Creado '+creado+'<br>por '+autor+'">'+fecha+'</label>';
        },
      },
      {
        name: 'id_usuario',
        data: function(data,type,dataToSet){
          return capitalizar(data.individuo.apellido)+' '+capitalizar(data.individuo.nombre);
        },
      },
      {
        name: 'apellido',
        data: function(data,type,dataToSet){
          var cliente = capitalizar(data.apellido)+' '+capitalizar(data.nombre);
          var documento = data.tipo_documento.nombre+' '+data.documento;
        	return cliente+'<br>'+documento;
        }
      },
      {
        name: 'vehiculo_modelo',
        data: function(data,type,dataToSet){
					var respuesta = data.marca.nombre+' : '+data.vehiculo_modelo;
					if(data.usado==null){
						respuesta += ' <span class="badge bg-success">NUEVO</span>';
					} else {
						var href = "{{path_for('vehicle.getCar', { id:99 })}}".replace('99',data.id_vehiculo);
						respuesta += ' <a class="btn badge bg-info " href="'+href+'" data-toggle="tooltip" title="Ver Vehiculo" target="_blank">'+data.usado.dominio+'</a>';
					}
          return respuesta;
        }
      },
      {
        name: 'vehiculo_precio',
        data: function(data,type,dataToSet){
          var contado = 'Contado: '+data.vehiculo_precio;
          return contado;
        }
      },
      {
        name: 'presupuesto_seña',
        data: function(data,type,dataToSet){
          var financiar = 'Financiar: '+(data.presupuesto_financiar==0?'MAXIMO':data.presupuesto_financiar);
          return financiar;
        },
      },
      {
        name: 'id_tipo_estado',
        data: function(data,type,dataToSet){
          var respuesta='<span class="badge" >'+data.tipo_estado.nombre+'</span>';
          return respuesta;
        },
      },
      {
        name: 'opciones',
        data: function(data,type,dataToSet){
          var respuesta = '';
					var ver = "{{path_for('cliente.datero.ver', {  'id': 99 })}}".replace('99',data.id);
          var editar = "{{path_for('cliente.datero.editar', {  'id': 99 })}}".replace('99',data.id);
					var imprimir =  "{{path_for('cliente.datero.imprimir', {  'id': 99 })}}".replace('99',data.id);
					var carpeta = '';
					if(data.id_carpeta>0){
						carpeta = "{{path_for('carpeta', {  'id': 99 })}}".replace('99',data.id_carpeta);
						carpeta = 'href="'+carpeta+'"';
					} else {
						carpeta = 'onclick="carpeta(99);"'.replace('99',data.id);
					}
          var imprimir =  "{{path_for('cliente.datero.imprimir', {  'id': 99 })}}".replace('99',data.id);
          var estados = 'onclick="estados(99);"'.replace('99',data.id);
          var eliminar = 'onclick="eliminar(99);"'.replace('99',data.id);
          var respuesta = '<div class="dropdown">'+
              '<button type="button" class="btn btn-sm dropdown-toggle" data-toggle="dropdown" aria-expanded="false">'+
                '<span class="caret"></span>'+
                '<span class="sr-only">Toggle Dropdown</span>'+
              '</button>'+
              '<div class="dropdown-menu" role="menu">'+
								'<a class="dropdown-item" target="_blank" href="'+ver+'"><span class="ion ion-eye"></span> Ver</a>'+
                '<a class="dropdown-item" href="'+editar+'"><span class="ion ion-edit"></span> Editar</a>'+
                '<a class="dropdown-item" href="'+imprimir+'" target="_blank" ><span class="ion ion-printer"></span> Imprimir</a>'+
                '<a class="dropdown-item" '+estados+' ><span class="ion ion-link"></span> Estados</a>'+
								'<a class="dropdown-item" '+carpeta+' ><span class="fa fa-copy"></span> '+(data.id_carpeta>0?'Ir a Carpeta':'Crear Carpeta')+'</a>'+
                '<a class="dropdown-item" '+eliminar+' ><span class="ion ion-close-round"></span> Eliminar</a>'+
              '</div>'+
            '</div>';

          return respuesta;
        },
        className: 'text-center',
      }
    ],
    columnDefs:[
      {
        targets:[0,6],
        width:"10%",
      },
      {
        targets:[7],
        width:"5%",
      },
    ],
    createdRow: function (row, data, index) {
    },
    "language": {
      "sProcessing":     "Procesando...",
      "sLengthMenu":     "Mostrar _MENU_ registros",
      "sZeroRecords":    "No se encontraron resultados",
      "sEmptyTable":     "Ningún dato disponible en esta tabla",
      "sInfo":           "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
      "sInfoEmpty":      "Mostrando registros del 0 al 0 de un total de 0 registros",
      "sInfoFiltered":   "(filtrado de un total de _MAX_ registros)",
      "sInfoPostFix":    "",
      "sSearch":         "Buscar:",
      "sUrl":            "",
      "sInfoThousands":  ",",
      "sLoadingRecords": "Cargando...",
      "oPaginate": {
        "sFirst":    "Primero",
        "sLast":     "Último",
        "sNext":     "Siguiente",
        "sPrevious": "Anterior"
      },
      "oAria": {
        "sSortAscending":  ": Activar para ordenar la columna de manera ascendente",
        "sSortDescending": ": Activar para ordenar la columna de manera descendente"
      }
    }
  });

  $('#tablaVehiculos').DataTable( {
    order:[[0,'desc']],
    lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "TODO"]],
    searching: false,
    "language": {
      "sProcessing":     "Procesando...",
      "sLengthMenu":     "Mostrar _MENU_ registros",
      "sZeroRecords":    "No se encontraron resultados",
      "sEmptyTable":     "Ningún dato disponible en esta tabla",
      "sInfo":           "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
      "sInfoEmpty":      "Mostrando registros del 0 al 0 de un total de 0 registros",
      "sInfoFiltered":   "(filtrado de un total de _MAX_ registros)",
      "sInfoPostFix":    "",
      "sSearch":         "Buscar:",
      "sUrl":            "",
      "sInfoThousands":  ",",
      "sLoadingRecords": "Cargando...",
      "oPaginate": {
        "sFirst":    "Primero",
        "sLast":     "Último",
        "sNext":     "Siguiente",
        "sPrevious": "Anterior"
      },
      "oAria": {
        "sSortAscending":  ": Activar para ordenar la columna de manera ascendente",
        "sSortDescending": ": Activar para ordenar la columna de manera descendente"
      }
    }
  });

});

function eliminar(id_datero){
  var route = "{{path_for('cliente.datero.eliminar',{'id':99})}}".replace('99',id_datero);
  bootbox.confirm({
    title: "Eliminar el Datero?",
    message: "Desea eliminar el datero? Los clientes y vehiculos creados a partir del datero NO seran eliminados.",
    buttons: {
      cancel: {
        label: '<i class="fa fa-times"></i> Cancelar'
      },
      confirm: {
        label: '<i class="ion ion-trash-a"></i> Confirmar'
      }
    },
    callback: function (result) {
      if(result){
        $.ajax({
          type: "get",
          url: route,
          success: function(data,status){
            var table = $('#tablaDatero').DataTable();
            table.ajax.reload(null, true);
            $.toast({
              heading: 'Datero',
              text: data.message,
              showHideTransition: 'slide',
              icon: 'success',
              position: 'bottom-right',
            });
          },
          error: function(xhr, ajaxOptions,e) {
            $.toast({
              heading: 'Datero',
              text: 'A ocurrido un problema. Por favor intente mas tarde.',
              showHideTransition: 'slide',
              icon: 'error',
              position: 'bottom-right',
              hideAfter: false,
            });
          }
        });
      }
    }
  });
}

function estados(id){
  bootbox.prompt({
    title: "Seleccione el Nuevo Estado del Datero.",
    inputType: 'select',
    inputOptions: {{estados|json_encode|raw}},
    buttons: {
      cancel: {
        label: '<i class="fa fa-times"></i> Cancelar'
      },
      confirm: {
        label: 'Confirmar'
      }
    },
    callback: function (result) {
      if(result!=null){
        var route = "{{path_for('cliente.datero.estado',{id:99,id_tipo_estado:'id_tipo_estado'}) }} "
          .replace('99',id)
          .replace('id_tipo_estado',result)
          .replace(/&amp;/g,'&');
        document.location.assign(route);
      }
    }
  });
}

function carpeta(id){
  bootbox.confirm({
    message: "Esta por crear una nueva CARPETA. Los cliente y vehiculos relacionados al datero tambien seran vinculados a la carpeta.",
    buttons: {
      cancel: {
        label: '<i class="fa fa-times"></i> Cancelar'
      },
      confirm: {
        label: 'Confirmar'
      }
    },
    callback: function (result) {
      if(result!=null){
        var route = "{{path_for('cliente.datero.carpeta.nuevo',{id_datero:99}) }} "
          .replace('99',id)
          .replace(/&amp;/g,'&');
        document.location.assign(route);
      }
    }
  });
}

function respuestaDiferenciaFecha(momentDate){
  var minutos = moment().diff(momentDate,'minutes');
  var respuesta = '';
  if (minutos == 0){
    respuesta = ' ahora';
  } else if(minutos>60){
    var horas = Math.floor(minutos / 60);
    if(horas>24){
      dias = Math.floor(horas / 24);
      if(dias>30){
        meses = Math.floor(dias / 30);
        if(meses>2){
          respuesta = ' hace '+meses + ' meses';
        } else {
          respuesta = momentDate.format('DD/MM/YYYY');
        }
      } else {
        if(horas == 1){
          respuesta = ' ayer';
        } else {
          respuesta = ' hace '+dias + ' dias';
        }
      }
    } else {
      if(horas == 1){
        respuesta = ' hace 1 hora';
      } else {
        respuesta = ' hace '+horas + ' horas';
      }
    }
  } else if(minutos>0) {
    if( minutos <5){
      respuesta = ' hace instantes';
    } else {
      respuesta = ' hace '+minutos + ' minutos';
    }
  } else {
    minutos = minutos * (-1);
    if(minutos>60){
      var horas = Math.floor(minutos / 60);
      if( horas > 24){
        dias = Math.floor(horas / 24);
        if(dias == 1){
          respuesta = ' mañana';
        } else {
          respuesta = ' en '+dias+' dias';
        }
      } else if (horas == 1) {
        respuesta = ' en 1 hora';
      } else {
        respuesta = ' en '+ horas + ' horas';
      }
    } else {
      if(minutos < 5){
        respuesta = ' en instante';
      } else {
        respuesta = ' en '+ minutos + ' minutos';
      }
    }
  }
  return respuesta;
}

function capitalizar(str){
  return str.substr(0,1).toUpperCase()+str.substr(1);
}
</script>
{% endblock %}
